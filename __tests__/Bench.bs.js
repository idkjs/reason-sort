// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");

function bench(name, f) {
  var t0 = Date.now();
  var result = Curry._1(f, undefined);
  var t1 = Date.now();
  Curry._2(Printf.printf(/* Format */{
            _0: {
              TAG: /* String */2,
              _0: {
                TAG: /* Lit_padding */0,
                _0: /* Right */1,
                _1: 20
              },
              _1: {
                TAG: /* String_literal */11,
                _0: " : ",
                _1: {
                  TAG: /* Float */8,
                  _0: /* Float_f */0,
                  _1: /* No_padding */0,
                  _2: /* Lit_precision */{
                    _0: 3
                  },
                  _3: {
                    TAG: /* String_literal */11,
                    _0: " s\n",
                    _1: {
                      TAG: /* Flush */10,
                      _0: /* End_of_format */0
                    }
                  }
                }
              }
            },
            _1: "%20s : %.3f s\n%!"
          }), name, t1 - t0);
  return result;
}

function cons(x, xs) {
  return {
          hd: x,
          tl: xs
        };
}

function uncons(param) {
  if (param) {
    return [
            param.hd,
            param.tl
          ];
  }
  
}

var Lst = {
  empty: /* [] */0,
  cons: cons,
  uncons: uncons,
  fold_left: List.fold_left
};

function Test(L) {
  var make = function (n) {
    var _acc = L.empty;
    var _i = n;
    while(true) {
      var i = _i;
      var acc = _acc;
      if (i === 0) {
        return acc;
      }
      _i = i - 1 | 0;
      _acc = Curry._2(L.cons, i, acc);
      continue ;
    };
  };
  var sum_foldl = function (xs) {
    return Curry._3(L.fold_left, (function (prim, prim$1) {
                  return prim + prim$1 | 0;
                }), 0, xs);
  };
  var sum_uncons = function (_acc, _xs) {
    while(true) {
      var xs = _xs;
      var acc = _acc;
      var match = Curry._1(L.uncons, xs);
      if (match === undefined) {
        return acc;
      }
      _xs = match[1];
      _acc = acc + match[0] | 0;
      continue ;
    };
  };
  var sum_uncons$1 = function (xs) {
    return sum_uncons(0, xs);
  };
  var xs = bench("make 10m", (function (param) {
          return make(10000000);
        }));
  var x = bench("sum_foldl", (function (param) {
          return sum_foldl(xs);
        }));
  var y = bench("sum_uncons", (function (param) {
          return sum_uncons(0, xs);
        }));
  if (x !== y) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Bench.re",
            54,
            4
          ],
          Error: new Error()
        };
  }
  return {
          make: make,
          sum_foldl: sum_foldl,
          sum_uncons: sum_uncons$1
        };
}

Printf.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "-- List -------------------\n",
        _1: {
          TAG: /* Flush */10,
          _0: /* End_of_format */0
        }
      },
      _1: "-- List -------------------\n%!"
    });

function make(n) {
  var _acc = /* [] */0;
  var _i = n;
  while(true) {
    var i = _i;
    var acc = _acc;
    if (i === 0) {
      return acc;
    }
    _i = i - 1 | 0;
    _acc = {
      hd: i,
      tl: acc
    };
    continue ;
  };
}

function sum_foldl(xs) {
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, xs);
}

function sum_uncons(_acc, _xs) {
  while(true) {
    var xs = _xs;
    var acc = _acc;
    var match = uncons(xs);
    if (match === undefined) {
      return acc;
    }
    _xs = match[1];
    _acc = acc + match[0] | 0;
    continue ;
  };
}

function sum_uncons$1(xs) {
  return sum_uncons(0, xs);
}

var xs = bench("make 10m", (function (param) {
        return make(10000000);
      }));

var x = bench("sum_foldl", (function (param) {
        return sum_foldl(xs);
      }));

var y = bench("sum_uncons", (function (param) {
        return sum_uncons(0, xs);
      }));

if (x !== y) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Bench.re",
          54,
          4
        ],
        Error: new Error()
      };
}

var A = {
  make: make,
  sum_foldl: sum_foldl,
  sum_uncons: sum_uncons$1
};

Printf.printf(/* Format */{
      _0: {
        TAG: /* Char_literal */12,
        _0: /* '\n' */10,
        _1: {
          TAG: /* Flush */10,
          _0: /* End_of_format */0
        }
      },
      _1: "\n%!"
    });

exports.bench = bench;
exports.Lst = Lst;
exports.Test = Test;
exports.A = A;
/*  Not a pure module */
