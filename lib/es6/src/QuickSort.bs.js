// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Random from "bs-platform/lib/es6/random.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Swap$ReasonSort from "./Swap.bs.js";

function quicksort(t) {
  var split = function (start, length, pivot_pos) {
    var pivot = Caml_array.get(t, pivot_pos);
    Swap$ReasonSort.swap(start, pivot_pos, t);
    var low = start + 1 | 0;
    var high = (start + length | 0) - 1 | 0;
    while(low < high) {
      while(low < high && Caml_obj.caml_lessequal(Caml_array.get(t, low), pivot)) {
        low = low + 1 | 0;
      };
      while(low < high && Caml_obj.caml_greaterequal(Caml_array.get(t, high), pivot)) {
        high = high - 1 | 0;
      };
      if (low < high) {
        Swap$ReasonSort.swap(low, high, t);
      }
      
    };
    if (Caml_obj.caml_greaterthan(Caml_array.get(t, low), pivot)) {
      low = low - 1 | 0;
    }
    Swap$ReasonSort.swap(start, low, t);
    return low;
  };
  var sort = function (_start, _length) {
    while(true) {
      var length = _length;
      var start = _start;
      if (length <= 1) {
        return ;
      }
      var pivot_pos = start + Random.$$int(length) | 0;
      var new_pos = split(start, length, pivot_pos);
      sort(start, new_pos - start | 0);
      _length = ((start + length | 0) - new_pos | 0) - 1 | 0;
      _start = new_pos + 1 | 0;
      continue ;
    };
  };
  return sort(0, t.length);
}

function r_quicksort(l) {
  var split = function (list, pivot) {
    var _inf = /* [] */0;
    var _sup = /* [] */0;
    var _param = list;
    while(true) {
      var param = _param;
      var sup = _sup;
      var inf = _inf;
      if (!param) {
        return [
                inf,
                sup
              ];
      }
      var t = param.tl;
      var h = param.hd;
      if (Caml_obj.caml_lessthan(h, pivot)) {
        _param = t;
        _inf = {
          hd: h,
          tl: inf
        };
        continue ;
      }
      _param = t;
      _sup = {
        hd: h,
        tl: sup
      };
      continue ;
    };
  };
  var sort = function (_result, _param) {
    while(true) {
      var param = _param;
      var result = _result;
      if (!param) {
        return result;
      }
      var t = param.tl;
      var a = param.hd;
      if (!t) {
        return {
                hd: a,
                tl: result
              };
      }
      var match = split(t, a);
      _param = match[1];
      _result = {
        hd: a,
        tl: sort(result, match[0])
      };
      continue ;
    };
  };
  List.rev(sort(/* [] */0, l));
  
}

export {
  quicksort ,
  r_quicksort ,
  
}
/* No side effect */
