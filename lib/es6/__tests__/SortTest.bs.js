// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Random from "bs-platform/lib/es6/random.js";
import * as Caml_sys from "bs-platform/lib/es6/caml_sys.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_primitive from "bs-platform/lib/es6/caml_primitive.js";
import * as HeapSort$ReasonSort from "../src/HeapSort.bs.js";
import * as MergeSort$ReasonSort from "../src/MergeSort.bs.js";
import * as QuickSort$ReasonSort from "../src/QuickSort.bs.js";
import * as BubbleSort$ReasonSort from "../src/BubbleSort.bs.js";
import * as InsertSort$ReasonSort from "../src/InsertSort.bs.js";
import * as SelectionSort$ReasonSort from "../src/SelectionSort.bs.js";

function random_vect(length) {
  var t = Caml_array.caml_make_vect(length, 0);
  for(var pos = 0; pos < length; ++pos){
    Caml_array.set(t, pos, Random.$$int(33554431));
  }
  return t;
}

function random_list(n) {
  if (n !== 0) {
    return {
            hd: Random.$$int(33554431),
            tl: random_list(n - 1 | 0)
          };
  } else {
    return /* [] */0;
  }
}

function time(randomize, sort, length) {
  var data = Curry._1(randomize, length);
  var start = Caml_sys.caml_sys_time(undefined);
  Curry._1(sort, data);
  return Caml_sys.caml_sys_time(undefined) - start;
}

function time_fn(name, random, fn, counts) {
  var _time_fn = function (_param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var count = param.hd;
      Curry._3(Printf.printf(/* Format */{
                _0: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String_literal */11,
                    _0: " : ",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* String_literal */11,
                        _0: " elements -> ",
                        _1: {
                          TAG: /* Float */8,
                          _0: /* Float_f */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* '\n' */10,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  }
                },
                _1: "%s : %d elements -> %f\n"
              }), name, count, time(random, fn, count));
      _param = param.tl;
      continue ;
    };
  };
  _time_fn(counts);
  return Pervasives.print_newline(undefined);
}

function bench(param) {
  var t0 = Date.now();
  var result = Curry._1(param.fn, undefined);
  var t1 = Date.now();
  Curry._2(Printf.printf(/* Format */{
            _0: {
              TAG: /* String */2,
              _0: {
                TAG: /* Lit_padding */0,
                _0: /* Right */1,
                _1: 20
              },
              _1: {
                TAG: /* String_literal */11,
                _0: " : ",
                _1: {
                  TAG: /* Float */8,
                  _0: /* Float_f */0,
                  _1: /* No_padding */0,
                  _2: /* Lit_precision */{
                    _0: 3
                  },
                  _3: {
                    TAG: /* String_literal */11,
                    _0: " s\n",
                    _1: {
                      TAG: /* Flush */10,
                      _0: /* End_of_format */0
                    }
                  }
                }
              }
            },
            _1: "%20s : %.3f s\n%!"
          }), param.name, t1 - t0);
  return result;
}

var suite_0 = {
  name: "bubble_sort",
  fn: (function (param) {
      return time_fn("bubble_sort", random_vect, BubbleSort$ReasonSort.bubble_sort, {
                  hd: 10,
                  tl: {
                    hd: 100,
                    tl: {
                      hd: 1000,
                      tl: {
                        hd: 10000,
                        tl: /* [] */0
                      }
                    }
                  }
                });
    })
};

var suite_1 = {
  hd: {
    name: "insert_sort",
    fn: (function (param) {
        return time_fn("insert_sort", random_vect, InsertSort$ReasonSort.insert_sort, {
                    hd: 10,
                    tl: {
                      hd: 100,
                      tl: {
                        hd: 1000,
                        tl: {
                          hd: 10000,
                          tl: /* [] */0
                        }
                      }
                    }
                  });
      })
  },
  tl: {
    hd: {
      name: "selection_sort",
      fn: (function (param) {
          return time_fn("selection_sort", random_vect, SelectionSort$ReasonSort.selection_sort, {
                      hd: 10,
                      tl: {
                        hd: 100,
                        tl: {
                          hd: 1000,
                          tl: {
                            hd: 10000,
                            tl: /* [] */0
                          }
                        }
                      }
                    });
        })
    },
    tl: {
      hd: {
        name: "quicksort",
        fn: (function (param) {
            return time_fn("quicksort", random_vect, QuickSort$ReasonSort.quicksort, {
                        hd: 10,
                        tl: {
                          hd: 100,
                          tl: {
                            hd: 1000,
                            tl: {
                              hd: 10000,
                              tl: {
                                hd: 100000,
                                tl: {
                                  hd: 1000000,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      });
          })
      },
      tl: {
        hd: {
          name: "merge_sort",
          fn: (function (param) {
              return time_fn("merge_sort", random_vect, MergeSort$ReasonSort.merge_sort, {
                          hd: 10,
                          tl: {
                            hd: 100,
                            tl: {
                              hd: 1000,
                              tl: {
                                hd: 10000,
                                tl: {
                                  hd: 100000,
                                  tl: {
                                    hd: 1000000,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        });
            })
        },
        tl: {
          hd: {
            name: "heap_sort",
            fn: (function (param) {
                return time_fn("heap_sort", random_vect, HeapSort$ReasonSort.heap_sort, {
                            hd: 10,
                            tl: {
                              hd: 100,
                              tl: {
                                hd: 1000,
                                tl: {
                                  hd: 10000,
                                  tl: {
                                    hd: 100000,
                                    tl: {
                                      hd: 1000000,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          });
              })
          },
          tl: {
            hd: {
              name: "Array.sort",
              fn: (function (param) {
                  return time_fn("Array.sort", random_vect, (function (param) {
                                return $$Array.sort(Caml_primitive.caml_int_compare, param);
                              }), {
                              hd: 10,
                              tl: {
                                hd: 100,
                                tl: {
                                  hd: 1000,
                                  tl: {
                                    hd: 10000,
                                    tl: {
                                      hd: 100000,
                                      tl: {
                                        hd: 1000000,
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }
                            });
                })
            },
            tl: {
              hd: {
                name: "r_bubble_sort",
                fn: (function (param) {
                    return time_fn("r_bubble_sort", random_list, BubbleSort$ReasonSort.r_bubble_sort, {
                                hd: 10,
                                tl: {
                                  hd: 100,
                                  tl: {
                                    hd: 1000,
                                    tl: {
                                      hd: 10000,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              });
                  })
              },
              tl: {
                hd: {
                  name: "r_insert_sort",
                  fn: (function (param) {
                      return time_fn("r_insert_sort", random_list, InsertSort$ReasonSort.r_insert_sort, {
                                  hd: 10,
                                  tl: {
                                    hd: 100,
                                    tl: {
                                      hd: 1000,
                                      tl: {
                                        hd: 10000,
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                });
                    })
                },
                tl: {
                  hd: {
                    name: "r_selection_sort",
                    fn: (function (param) {
                        return time_fn("r_selection_sort", random_list, SelectionSort$ReasonSort.r_selection_sort, {
                                    hd: 10,
                                    tl: {
                                      hd: 100,
                                      tl: {
                                        hd: 1000,
                                        tl: {
                                          hd: 10000,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  });
                      })
                  },
                  tl: {
                    hd: {
                      name: "r_selection_sort2",
                      fn: (function (param) {
                          return time_fn("r_selection_sort2", random_list, SelectionSort$ReasonSort.r_selection_sort2, {
                                      hd: 10,
                                      tl: {
                                        hd: 100,
                                        tl: {
                                          hd: 1000,
                                          tl: {
                                            hd: 10000,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    });
                        })
                    },
                    tl: {
                      hd: {
                        name: "r_quicksort",
                        fn: (function (param) {
                            return time_fn("r_quicksort", random_list, QuickSort$ReasonSort.r_quicksort, {
                                        hd: 10,
                                        tl: {
                                          hd: 100,
                                          tl: {
                                            hd: 1000,
                                            tl: {
                                              hd: 10000,
                                              tl: {
                                                hd: 100000,
                                                tl: /* [] */0
                                              }
                                            }
                                          }
                                        }
                                      });
                          })
                      },
                      tl: {
                        hd: {
                          name: "r_merge_sort",
                          fn: (function (param) {
                              return time_fn("r_merge_sort", random_list, MergeSort$ReasonSort.r_merge_sort, {
                                          hd: 10,
                                          tl: {
                                            hd: 100,
                                            tl: {
                                              hd: 1000,
                                              tl: {
                                                hd: 10000,
                                                tl: {
                                                  hd: 100000,
                                                  tl: /* [] */0
                                                }
                                              }
                                            }
                                          }
                                        });
                            })
                        },
                        tl: {
                          hd: {
                            name: "tr_merge_sort",
                            fn: (function (param) {
                                return time_fn("tr_merge_sort", random_list, MergeSort$ReasonSort.tr_merge_sort, {
                                            hd: 10,
                                            tl: {
                                              hd: 100,
                                              tl: {
                                                hd: 1000,
                                                tl: {
                                                  hd: 10000,
                                                  tl: {
                                                    hd: 100000,
                                                    tl: /* [] */0
                                                  }
                                                }
                                              }
                                            }
                                          });
                              })
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

var suite = {
  hd: suite_0,
  tl: suite_1
};

List.iter(bench, suite);

var my_max_int = 33554431;

export {
  my_max_int ,
  random_vect ,
  random_list ,
  time ,
  time_fn ,
  bench ,
  suite ,
  
}
/*  Not a pure module */
